//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Microsoft.Quantum.Samples.OpenQasmReader.Tests.Properties {
    using System;
    
    
    /// <summary>
    ///   A strongly-typed resource class, for looking up localized strings, etc.
    /// </summary>
    // This class was auto-generated by the StronglyTypedResourceBuilder
    // class via a tool like ResGen or Visual Studio.
    // To add or remove a member, edit your .ResX file then rerun ResGen
    // with the /str option, or rebuild your VS project.
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "15.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    internal class Resources {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal Resources() {
        }
        
        /// <summary>
        ///   Returns the cached ResourceManager instance used by this class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Resources.ResourceManager ResourceManager {
            get {
                if (object.ReferenceEquals(resourceMan, null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("Microsoft.Quantum.Samples.OpenQasmReader.Tests.Properties.Resources", typeof(Resources).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Overrides the current thread's CurrentUICulture property for all
        ///   resource lookups using this strongly typed resource class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to // Copyright (c) Microsoft Corporation. All rights reserved.
        ///// Licensed under the MIT License.
        ///OPENQASM 2.0;
        ///qreg q[2];
        ///creg c[2];
        ///H q[0]; 
        ///cx q[0],q[1];
        ///measure q -&gt; c;.
        /// </summary>
        internal static string CNot {
            get {
                return ResourceManager.GetString("CNot", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to namespace Microsoft.Quantum.Samples.OpenQasmReader.Tests.Validate
        ///{
        ///    open Microsoft.Quantum.Primitive;
        ///    open Microsoft.Quantum.Canon;
        ///    open Microsoft.Quantum.Extensions.Math;
        ///
        ///    operation CNotTest():(Result[])
        ///    {
        ///        body
        ///        {
        ///            mutable c = new Result[2];
        ///            using(q = Qubit[2]){
        ///            H(q[0]);
        ///            CNOT(q[0],q[1]);
        ///            for(_idx in 0..Length(c)){
        ///                set c[_idx] = M(q[_idx]);
        ///            }
        ///            ResetAll(q);
        ///   [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string CNotResult {
            get {
                return ResourceManager.GetString("CNotResult", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to // Copyright (c) Microsoft Corporation. All rights reserved.
        ///// Licensed under the MIT License.
        ///OPENQASM 2.0;
        ///qreg q[5];
        ///creg c[5];
        ///x q[0];
        ///x q[1];
        ///id q[2];
        ///h q[2];
        ///cx q[1],q[2];
        ///tdg q[2];
        ///cx q[0],q[2];
        ///t q[2];
        ///cx q[1],q[2];
        ///tdg q[2];
        ///cx q[0],q[2];
        ///t q[1];
        ///t q[2];
        ///h q[2];
        ///cx q[1],q[2];
        ///h q[1];
        ///h q[2];
        ///cx q[1],q[2];
        ///h q[1];
        ///h q[2];
        ///cx q[1],q[2];
        ///cx q[0],q[2];
        ///t q[0];
        ///tdg q[2];
        ///cx q[0],q[2];
        ///measure q[0] -&gt; c[0];
        ///measure q[1] -&gt; c[1];
        ///measure q[2] -&gt; c[2];.
        /// </summary>
        internal static string Flip {
            get {
                return ResourceManager.GetString("Flip", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to namespace Microsoft.Quantum.Samples.OpenQasmReader.Tests.Validate
        ///{
        ///    open Microsoft.Quantum.Primitive;
        ///    open Microsoft.Quantum.Canon;
        ///    open Microsoft.Quantum.Extensions.Math;
        ///
        ///    operation FlipTest():(Result[])
        ///    {
        ///        body
        ///        {
        ///            mutable c = new Result[5];
        ///            using(q = Qubit[5]){
        ///            X(q[0]);
        ///            X(q[1]);
        ///            I(q[2]);
        ///            H(q[2]);
        ///            CNOT(q[1],q[2]);
        ///            (Adjoint T)(q[2]);
        ///            CNOT(q[0],q[2]); [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string FlipResult {
            get {
                return ResourceManager.GetString("FlipResult", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to // Copyright (c) Microsoft Corporation. All rights reserved.
        ///// Licensed under the MIT License.
        ///OPENQASM 2.0;
        ///qreg q[1];
        ///creg c[1];
        ///H q[0]; 
        ///measure q[0] -&gt; c[1];.
        /// </summary>
        internal static string Hadamard {
            get {
                return ResourceManager.GetString("Hadamard", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to namespace Microsoft.Quantum.Samples.OpenQasmReader.Tests.Validate
        ///{
        /// open Microsoft.Quantum.Primitive;
        /// open Microsoft.Quantum.Canon;
        /// open Microsoft.Quantum.Extensions.Math;
        ///
        /// operation HadamardTest():(Result[])
        /// {
        ///  body
        ///  {
        ///   mutable c = new Result[1];
        ///   using(q = Qubit[1]){
        ///   H(q[0]);
        ///   set c[1] = M(q[0]);
        ///   ResetAll(q);
        ///   }
        ///   return [c[1]];
        ///  }
        /// }
        ///
        ///}.
        /// </summary>
        internal static string HadamardResult {
            get {
                return ResourceManager.GetString("HadamardResult", resourceCulture);
            }
        }
    }
}
